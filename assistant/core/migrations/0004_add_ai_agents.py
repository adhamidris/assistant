# Generated by Django 5.1.5 on 2025-08-23 15:42

import django.db.models.deletion
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('context_tracking', '0004_add_ai_agents'),
        ('core', '0003_workspace_owner_appuser'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIAgent',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Agent name (e.g., 'Customer Support Bot', 'Sales Assistant')", max_length=100)),
                ('slug', models.SlugField(help_text='URL-friendly identifier for the agent', max_length=120)),
                ('description', models.TextField(blank=True, help_text="Description of the agent's purpose and capabilities")),
                ('channel_type', models.CharField(choices=[('instagram', 'Instagram'), ('whatsapp', 'WhatsApp'), ('facebook', 'Facebook Messenger'), ('telegram', 'Telegram'), ('website', 'Website Chat'), ('sms', 'SMS'), ('email', 'Email'), ('phone', 'Phone Call')], default='website', max_length=20)),
                ('channel_specific_config', models.JSONField(blank=True, default=dict, help_text='Channel-specific configuration settings')),
                ('business_context', models.JSONField(blank=True, default=dict, help_text='Business-specific context and parameters')),
                ('personality_config', models.JSONField(blank=True, default=dict, help_text='AI personality and communication style')),
                ('generated_prompt', models.TextField(blank=True, help_text='AI-generated prompt based on configuration')),
                ('custom_instructions', models.TextField(blank=True, help_text='Custom instructions for the AI agent')),
                ('prompt_version', models.CharField(default='1.0', help_text='Version of the current prompt', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether this agent is currently active')),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default agent for the workspace')),
                ('deployment_url', models.URLField(blank=True, help_text='Deployment URL for this agent')),
                ('performance_metrics', models.JSONField(blank=True, default=dict, help_text='Performance metrics and analytics')),
                ('conversation_count', models.IntegerField(default=0, help_text='Total conversations handled by this agent')),
                ('average_response_time', models.FloatField(default=0.0, help_text='Average response time in seconds')),
                ('customer_satisfaction_score', models.FloatField(default=0.0, help_text='Average customer satisfaction (1-5)')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_agents', to=settings.AUTH_USER_MODEL)),
                ('workspace', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_agents', to='core.workspace')),
            ],
            options={
                'db_table': 'ai_agents',
                'ordering': ['-is_default', 'name'],
            },
        ),
        migrations.CreateModel(
            name='AgentSchemaAssignment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('priority', models.IntegerField(default=1, help_text='Priority order for this schema (lower = higher priority)')),
                ('is_primary', models.BooleanField(default=False, help_text='Whether this is the primary schema for the agent')),
                ('is_required', models.BooleanField(default=True, help_text='Whether this schema is required for the agent')),
                ('custom_config', models.JSONField(blank=True, default=dict, help_text='Agent-specific customization for this schema')),
                ('field_mapping', models.JSONField(blank=True, default=dict, help_text='Custom field mappings for this agent-schema combination')),
                ('usage_count', models.IntegerField(default=0, help_text='Number of times this schema was used by the agent')),
                ('last_used', models.DateTimeField(blank=True, help_text='When this schema was last used', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('schema', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_assignments', to='context_tracking.workspacecontextschema')),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='schema_assignments', to='core.aiagent')),
            ],
            options={
                'db_table': 'agent_schema_assignments',
                'ordering': ['priority', 'schema__name'],
            },
        ),
        migrations.AddField(
            model_name='conversation',
            name='ai_agent',
            field=models.ForeignKey(blank=True, help_text='Agent handling this conversation', null=True, on_delete=django.db.models.deletion.CASCADE, to='core.aiagent'),
        ),
        migrations.CreateModel(
            name='BusinessTypeTemplate',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(help_text="Template name (e.g., 'Medical Practice Assistant', 'Restaurant Order Bot')", max_length=100)),
                ('industry', models.CharField(choices=[('healthcare', 'Healthcare/Medical'), ('restaurant', 'Restaurant/Food Service'), ('finance', 'Financial Services'), ('ecommerce', 'E-commerce/Retail'), ('realestate', 'Real Estate'), ('professional', 'Professional Services'), ('education', 'Education/Training'), ('consulting', 'Consulting/Advisory'), ('manufacturing', 'Manufacturing/Industrial'), ('technology', 'Technology/SaaS'), ('hospitality', 'Hospitality/Tourism'), ('legal', 'Legal Services'), ('creative', 'Creative/Media'), ('nonprofit', 'Non-Profit/Charity'), ('other', 'Other/General')], help_text='Industry category for this template', max_length=50)),
                ('description', models.TextField(help_text='Detailed description of what this template provides')),
                ('default_schema_templates', models.JSONField(default=dict, help_text='Templates for creating WorkspaceContextSchemas')),
                ('default_rule_templates', models.JSONField(default=dict, help_text='Templates for creating BusinessRules')),
                ('base_prompt_template', models.TextField(help_text='Base AI prompt template for this business type')),
                ('personality_defaults', models.JSONField(default=dict, help_text='Default personality and communication style')),
                ('conversation_flow', models.JSONField(default=dict, help_text='Suggested conversation flow patterns')),
                ('recommended_integrations', models.JSONField(default=dict, help_text='Recommended third-party integrations')),
                ('compliance_requirements', models.JSONField(default=dict, help_text='Industry compliance and regulatory requirements')),
                ('best_practices', models.JSONField(default=dict, help_text='Industry best practices and guidelines')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this template is available for use')),
                ('is_featured', models.BooleanField(default=False, help_text='Whether this template is featured/recommended')),
                ('version', models.CharField(default='1.0', help_text='Template version', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='created_templates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'business_type_templates',
                'ordering': ['-is_featured', 'industry', 'name'],
            },
        ),
        migrations.AddIndex(
            model_name='aiagent',
            index=models.Index(fields=['workspace', 'is_active'], name='ai_agents_workspa_2c0fb8_idx'),
        ),
        migrations.AddIndex(
            model_name='aiagent',
            index=models.Index(fields=['workspace', 'is_default'], name='ai_agents_workspa_cc0480_idx'),
        ),
        migrations.AddIndex(
            model_name='aiagent',
            index=models.Index(fields=['channel_type', 'is_active'], name='ai_agents_channel_e0ce2b_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='aiagent',
            unique_together={('workspace', 'slug')},
        ),
        migrations.AddIndex(
            model_name='agentschemaassignment',
            index=models.Index(fields=['agent', 'priority'], name='agent_schem_agent_i_9b979a_idx'),
        ),
        migrations.AddIndex(
            model_name='agentschemaassignment',
            index=models.Index(fields=['agent', 'is_primary'], name='agent_schem_agent_i_0c8148_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='agentschemaassignment',
            unique_together={('agent', 'schema')},
        ),
        migrations.AddIndex(
            model_name='businesstypetemplate',
            index=models.Index(fields=['industry', 'is_active'], name='business_ty_industr_f1841d_idx'),
        ),
        migrations.AddIndex(
            model_name='businesstypetemplate',
            index=models.Index(fields=['is_featured', 'is_active'], name='business_ty_is_feat_7f98c7_idx'),
        ),
    ]
